WT_SAMPLES = ["CTLrep1", "CTLrep2", "CTLrep3"]
KO_SAMPLES = ["KOrep1", "KOrep2", "KOrep3"]
ALL_SAMPLES = WT_SAMPLES + KO_SAMPLES
READS = ["R1", "R2"]

rule all:
    input:
        expand("qc/pretrim/{sample}_{read}_fastqc.html", sample=ALL_SAMPLES, read=READS),
        "qc/multiqc_report.html",
        expand('results/{sample}_flagstats.txt', sample=ALL_SAMPLES),
        "results/verse_concat_filtered.csv",
        "results/id2gene.txt"
       
       
rule fastqc_pretrim:
    input:
        "data/{sample}_{R}.fastq.gz"
    output:
        "qc/pretrim/{sample}_{R}_fastqc.html"
    conda:
        "env/rnaseq.yml"
    shell:
        "fastqc {input} --outdir qc/pretrim/"


rule multiqc:
    input:
        expand("qc/pretrim/{sample}_{R}_fastqc.html", sample=WT_SAMPLES + KO_SAMPLES, R=["R1", "R2"])
    output:
        "qc/multiqc_report.html"
    conda:
        "env/rnaseq.yml"
    shell:
        "multiqc qc/ --outdir qc/"


rule star:
	input:
		r1 = "data/{sample}_R1.fastq.gz",
		r2 = "data/{sample}_R2.fastq.gz",
		star_dir = 'm39_star/'
	output:	
		bam = 'aligned/{sample}.Aligned.out.bam'
	params:
		prefix = 'aligned/{sample}.'
	shell:
		'''
		STAR --genomeDir {input.star_dir} --readFilesIn {input.r1} {input.r2} --readFilesCommand zcat --outSAMtype BAM Unsorted --outFileNamePrefix {params.prefix}
		'''
		
rule samtools_flagstat:
	input:
		bam = "aligned/{sample}.Aligned.out.bam"
	output:
		flagstats = 'results/{sample}_flagstats.txt'
	conda:
		"env/rnaseq.yml"
	shell:
		'samtools flagstats {input.bam} > {output.flagstats}'

rule verse:
	input:
		bam = "aligned/{sample}.Aligned.out.bam",
		gtf = 'gencode.vM33.primary_assembly.annotation.gtf',
	output:
		verse_exons = 'results/{sample}.exon.txt'
	conda:
		"env/rnaseq.yml"
	params:
		prefix = 'results/{sample}'
	shell:
		'verse -S -a {input.gtf} -o {params.prefix} {input.bam}'

rule concat_verse:
	input:
		mats = expand('results/{sample}.exon.txt', sample=ALL_SAMPLES)
	output:
		concat = 'results/verse_concat.csv'
	conda:
		"env/rnaseq.yml"
	shell:
		'''
		python concat_df.py -i {input.mats} -o {output.concat}
		'''

rule filter_cts:
	input:
		verse = 'results/verse_concat.csv'
	output:
		filtered = 'results/verse_concat_filtered.csv'
	conda:
		"env/rnaseq.yml"
	shell:
		'''
		python filter_cts_mat.py -i {input.verse} -o {output.filtered}
		'''

rule txn_mapping:
	input:
		gtf = 'gencode.vM33.primary_assembly.annotation.gtf'
	output:
		mapping = 'results/id2gene.txt'
	conda:
		"env/rnaseq.yml"
	shell:
		'''
		python parse_gtf.py -i {input.gtf} -o {output.mapping}
		'''